"""
Django settings for convert_all project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

from pathlib import Path

# =========================================================
# Paths / Base
# =========================================================
BASE_DIR = Path(__file__).resolve().parent.parent

# =========================================================
# Core / Debug
# =========================================================
SECRET_KEY = 'django-insecure-mm&ik)$wmcq-1a%w3mb*6jbi&=(zjfo1@ce@t&hovp4d9csk9('
DEBUG = True
ALLOWED_HOSTS: list[str] = ["127.0.0.1", "localhost"]

# =========================================================
# Apps
# =========================================================
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Meus Apps
    'core',
    'tools.images.apps.ImagesConfig',
    'tools.bgremove.apps.BgremoveConfig',
    'tools.documents.apps.DocumentsConfig',
]

# =========================================================
# Middleware
# =========================================================
MIDDLEWARE = [
    "core.middleware.UploadLimitMiddleware",   # aplica 413 p/ excesso de bytes (free/premium)
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'convert_all.urls'

# =========================================================
# Templates
# =========================================================
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],          # templates nos apps
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Exponde limites/URLs ao front (CT_LIMIT_BYTES / CT_LIMIT_FILES / CT_UPGRADE_URL)
                'core.context_processors.plan_limits',
            ],
        },
    },
]

WSGI_APPLICATION = 'convert_all.wsgi.application'

# =========================================================
# Database (sqlite dev)
# =========================================================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# =========================================================
# Password validators
# =========================================================
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# =========================================================
# i18n / tz
# =========================================================
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# =========================================================
# Static
# =========================================================
STATIC_URL = '/static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =========================================================
# Dev security flags
# =========================================================
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0

# =========================================================
# Uploads / Media
# =========================================================
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

# Diretório temporário para uploads (dentro de MEDIA_ROOT)
FILE_UPLOAD_TEMP_DIR = str((MEDIA_ROOT / "_tmp_uploads").resolve())

# Garante que as pastas existem (evita SystemCheckError)
MEDIA_ROOT.mkdir(parents=True, exist_ok=True)
Path(FILE_UPLOAD_TEMP_DIR).mkdir(parents=True, exist_ok=True)

# =========================================================
# Limites de parser do Django (alinhados com os planos)
# =========================================================
# Tamanho em memória (deixe 0 p/ forçar arquivo temp)
FILE_UPLOAD_MAX_MEMORY_SIZE = 0
# Usa arquivo temporário para uploads grandes
FILE_UPLOAD_HANDLERS = ["django.core.files.uploadhandler.TemporaryFileUploadHandler"]
# Campos (form) – alto para não bloquear nosso form
DATA_UPLOAD_MAX_NUMBER_FIELDS = 100_000
# Buffer geral (1 GB) – só afeta payload em memória, não nosso limite de plano
DATA_UPLOAD_MAX_MEMORY_SIZE = 1_024 * 1_024 * 1_024  # 1 GB

# =========================================================
# Planos / Limites (fácil de trocar futuramente)
# =========================================================
# Tabela de limites por plano
UPLOAD_LIMITS = {
    # plano free
    "FREE_MAX_TOTAL_UPLOAD_BYTES": int(15 * 1024 * 1024),  # 500 MB
    "FREE_MAX_FILES": 25,                                  # 300 arquivos

    # plano premium
    "PREMIUM_MAX_TOTAL_UPLOAD_BYTES": int(1024 * 1024 * 1024),  # 1 GB
    "PREMIUM_MAX_FILES": 5000,                                   # ex.: 5 mil arquivos
}

# Plano atual (no futuro: ler do usuário autenticado)
CURRENT_PLAN = "free"

# Deriva limites ativos (usados pelo middleware e pelo context_processor)
if CURRENT_PLAN == "premium":
    ACTIVE_MAX_BYTES = UPLOAD_LIMITS["PREMIUM_MAX_TOTAL_UPLOAD_BYTES"]
    ACTIVE_MAX_FILES = UPLOAD_LIMITS["PREMIUM_MAX_FILES"]
else:
    ACTIVE_MAX_BYTES = UPLOAD_LIMITS["FREE_MAX_TOTAL_UPLOAD_BYTES"]
    ACTIVE_MAX_FILES = UPLOAD_LIMITS["FREE_MAX_FILES"]

# Limite do PARSER do Django para número de arquivos.
# IMPORTANTÍSSIMO: deve ser >= limite que você expõe no front,
# caso contrário o Django barra antes da nossa view/middleware.
DATA_UPLOAD_MAX_NUMBER_FILES = int(ACTIVE_MAX_FILES)

# URL de upgrade (o context processor repassa para o template)
UPGRADE_URL = "/premium"
